import{svg}from"lit-element";import{classMap}from"lit-html/directives/class-map.js";import{styleMap}from"lit-html/directives/style-map.js";import Merge from"./merge";import BaseTool from"./base-tool";import Utils from"./utils";export default class SparklineBarChartTool extends BaseTool{constructor(s,t,i){super(s,Merge.mergeDeep({position:{cx:50,cy:50,height:25,width:25,margin:.5,orientation:"vertical"},hours:24,barhours:1,color:"var(--primary-color)",classes:{tool:{"sak-barchart":!0,hover:!0},bar:{},line:{"sak-barchart__line":!0,hover:!0}},styles:{tool:{},line:{},bar:{}},colorstops:[],show:{style:"fixedcolor"}},t),i),this.svg.margin=Utils.calculateSvgDimension(this.config.position.margin);s="vertical"===this.config.position.orientation?this.svg.width:this.svg.height;this.svg.barWidth=(s-(this.config.hours/this.config.barhours-1)*this.svg.margin)/(this.config.hours/this.config.barhours),this._data=[],this._bars=[],this._scale={},this._needsRendering=!1,this.classes.bar={},this.styles.tool={},this.styles.line={},this.stylesBar={},this.dev.debug&&console.log("SparkleBarChart constructor coords, dimensions",this.coords,this.dimensions,this.svg,this.config)}computeMinMax(){let i=this._series[0],e=this._series[0];for(let s=1,t=this._series.length;s<t;s++){var r=this._series[s];i=r<i?r:i,e=r>e?r:e}this._scale.min=i,this._scale.max=e,this._scale.size=e-i,this._scale.size=1.05*(e-i),this._scale.min=e-this._scale.size}set data(s){this._series=Object.assign(s),this.computeBars(),this._needsRendering=!0}set series(s){this._series=Object.assign(s),this.computeBars(),this._needsRendering=!0}hasSeries(){return this.defaultEntityIndex()}computeBars({_bars:i}=this){this.computeMinMax(),"minmaxgradient"===this.config.show.style&&(this.colorStopsMinMax={},this.colorStopsMinMax={[this._scale.min.toString()]:this.config.minmaxgradient.colors.min,[this._scale.max.toString()]:this.config.minmaxgradient.colors.max}),"vertical"===this.config.position.orientation?(this.dev.debug&&console.log("bar is vertical"),this._series.forEach((s,t)=>{i[t]||(i[t]={}),i[t].length=0===this._scale.size?0:(s-this._scale.min)/this._scale.size*this.svg.height,i[t].x1=this.svg.x+this.svg.barWidth/2+(this.svg.barWidth+this.svg.margin)*t,i[t].x2=i[t].x1,i[t].y1=this.svg.y+this.svg.height,i[t].y2=i[t].y1-this._bars[t].length,i[t].dataLength=this._bars[t].length})):"horizontal"===this.config.position.orientation?(this.dev.debug&&console.log("bar is horizontal"),this._data.forEach((s,t)=>{i[t]||(i[t]={}),i[t].length=0===this._scale.size?0:(s-this._scale.min)/this._scale.size*this.svg.width,i[t].y1=this.svg.y+this.svg.barWidth/2+(this.svg.barWidth+this.svg.margin)*t,i[t].y2=i[t].y1,i[t].x1=this.svg.x,i[t].x2=i[t].x1+this._bars[t].length,i[t].dataLength=this._bars[t].length})):this.dev.debug&&console.log("SparklineBarChartTool - unknown barchart orientation (horizontal or vertical)")}_renderBars(){const i=[];if(0!==this._bars.length)return this.dev.debug&&console.log("_renderBars IN",this.toolId),this._bars.forEach((s,t)=>{this.dev.debug&&console.log("_renderBars - bars",s,t);s=this.getColorFromState(this._series[t]);this.stylesBar[t]||(this.stylesBar[t]={...this.config.styles.bar}),this._bars[t].y2||console.log("sparklebarchart y2 invalid",this._bars[t]),i.push(svg`
          <line id="line-segment-${this.toolId}-${t}" class="${classMap(this.config.classes.line)}"
                    style="${styleMap(this.stylesBar[t])}"
                    x1="${this._bars[t].x1}"
                    x2="${this._bars[t].x2}"
                    y1="${this._bars[t].y1}"
                    y2="${this._bars[t].y2}"
                    data-length="${this._bars[t].dataLength}"
                    stroke="${s}"
                    stroke-width="${this.svg.barWidth}"
                    />
          `)}),this.dev.debug&&console.log("_renderBars OUT",this.toolId),svg`${i}`}render(){return svg`
        <g id="barchart-${this.toolId}" class="${classMap(this.classes.tool)}"
          @click=${s=>this.handleTapEvent(s,this.config)}>
          ${this._renderBars()}
        </g>
      `}}