import{svg}from"lit-element";import{classMap}from"lit-html/directives/class-map.js";import{styleMap}from"lit-html/directives/style-map.js";import{stateIcon}from"custom-card-helpers";import{FONT_SIZE}from"./const";import Merge from"./merge";import BaseTool from"./base-tool";import Utils from"./utils";export default class EntityIconTool extends BaseTool{constructor(i,s,t){super(i,Merge.mergeDeep({classes:{tool:{"sak-icon":!0,hover:!0},icon:{"sak-icon__icon":!0}},styles:{icon:{}}},s),t),this.svg.iconSize=this.config.position.icon_size||3,this.svg.iconPixels=this.svg.iconSize*FONT_SIZE;i=this.config.position.align||"center",s="center"===i?.5:"start"===i?-1:1,t=400/this._card.viewBox.width;this.svg.xpx=this.svg.cx,this.svg.ypx=this.svg.cy,!this._card.isSafari&&!this._card.iOS||this._card.isSafari16?(this.svg.xpx=this.svg.xpx-this.svg.iconPixels*s,this.svg.ypx=this.svg.ypx-.5*this.svg.iconPixels-.25*this.svg.iconPixels):(this.svg.iconSize=this.svg.iconSize*t,this.svg.xpx=this.svg.xpx*t-this.svg.iconPixels*s*t,this.svg.ypx=this.svg.ypx*t-.5*this.svg.iconPixels*t-.25*this.svg.iconPixels*t),this.classes.icon={},this.styles.icon={},EntityIconTool.sakIconCache||(EntityIconTool.sakIconCache={}),this.dev.debug&&console.log("EntityIconTool constructor coords, dimensions, config",this.coords,this.dimensions,this.config)}_buildIcon(i,s,t){return this.activeAnimation?.icon||t||s?.icon||i?.attributes?.icon||stateIcon(i)}_renderIcon(){this.MergeAnimationClassIfChanged(),this.MergeAnimationStyleIfChanged(),this.MergeColorFromState(this.styles.icon);var i=this._buildIcon(this._card.entities[this.defaultEntityIndex()],this.config.hasOwnProperty("entity_index")?this._card.config.entities[this.defaultEntityIndex()]:void 0,this.config.icon),s=(this.svg.iconSize=this.config.position.icon_size||2,this.svg.iconPixels=this.svg.iconSize*FONT_SIZE,this.svg.iconSize=this.config.position.icon_size||2,this.svg.iconPixels=Utils.calculateSvgDimension(this.svg.iconSize),this.config.position.align||"center"),t="center"===s?.5:"start"===s?-1:1,o=400/this._card.viewBox.width;return this.svg.xpx=this.svg.cx,this.svg.ypx=this.svg.cy,!this._card.isSafari&&!this._card.iOS||this._card.isSafari16?(this.svg.xpx=this.svg.cx-this.svg.iconPixels*t,this.svg.ypx=this.svg.cy-this.svg.iconPixels*t,this.dev.debug&&console.log("EntityIconTool::_renderIcon - svg values =",this.toolId,this.svg,this.config.cx,this.config.cy,s,t)):(this.svg.iconSize=this.svg.iconSize*o,this.svg.iconPixels=this.svg.iconPixels*o,this.svg.xpx=this.svg.xpx*o-this.svg.iconPixels*t*o,this.svg.ypx=this.svg.ypx*o-.9*this.svg.iconPixels*o,this.svg.xpx=this.svg.cx*o-this.svg.iconPixels*t*o,this.svg.ypx=this.svg.cy*o-this.svg.iconPixels*t*o),this.alternateColor||(this.alternateColor="rgba(0,0,0,0)"),EntityIconTool.sakIconCache[i]?this.iconSvg=EntityIconTool.sakIconCache[i]:(s=this._card.shadowRoot.getElementById("icon-".concat(this.toolId))?.shadowRoot?.querySelectorAll("*"),this.iconSvg=s?s[0]?.path:void 0,this.iconSvg&&(EntityIconTool.sakIconCache[i]=this.iconSvg)),this.iconSvg?(this.svg.iconSize=this.config.position.icon_size||2,this.svg.iconPixels=Utils.calculateSvgDimension(this.svg.iconSize),this.svg.x1=this.svg.cx-this.svg.iconPixels/2,this.svg.y1=this.svg.cy-this.svg.iconPixels/2,this.svg.x1=this.svg.cx-.5*this.svg.iconPixels,this.svg.y1=this.svg.cy-.5*this.svg.iconPixels,t=this.svg.iconPixels/24,svg`
        <g id="icon-${this.toolId}" class="${classMap(this.classes.icon)}" style="${styleMap(this.styles.icon)}" x="${this.svg.x1}px" y="${this.svg.y1}px" transform-origin="${this.svg.cx} ${this.svg.cy}">
          <rect x="${this.svg.x1}" y="${this.svg.y1}" height="${this.svg.iconPixels}px" width="${this.svg.iconPixels}px" stroke-width="0px" fill="rgba(0,0,0,0)"></rect>
          <path d="${this.iconSvg}" transform="translate(${this.svg.x1},${this.svg.y1}) scale(${t})"></path>
        <g>
      `):svg`
        <foreignObject width="0px" height="0px" x="${this.svg.xpx}" y="${this.svg.ypx}" overflow="hidden">
          <body>
            <div class="div__icon, hover" xmlns="http://www.w3.org/1999/xhtml"
                style="line-height:${this.svg.iconPixels}px;position:relative;border-style:solid;border-width:0px;border-color:${this.alternateColor};fill:${this.alternateColor};color:${this.alternateColor};">
                <ha-icon icon=${i} id="icon-${this.toolId}"
                @animationstart=${i=>this._handleAnimationEvent(i,this)}
                @animationiteration=${i=>this._handleAnimationEvent(i,this)}
                style="animation: flash 0.15s 20;"></ha-icon>
            </div>
          </body>
        </foreignObject>
        `}_handleAnimationEvent(i,s){i.stopPropagation(),i.preventDefault(),s.iconSvg=this._card.shadowRoot.getElementById("icon-".concat(this.toolId))?.shadowRoot?.querySelectorAll("*")[0]?.path,s.iconSvg&&s._card.requestUpdate()}firstUpdated(i){}render(){return svg`
      <g "" id="icongrp-${this.toolId}" class="${classMap(this.classes.tool)}" style="${styleMap(this.styles.tool)}"
        @click=${i=>this.handleTapEvent(i,this.config)} >

        ${this._renderIcon()}
      </g>
    `}}