import{svg}from"lit-element";import{classMap}from"lit-html/directives/class-map.js";import{styleMap}from"lit-html/directives/style-map.js";import{SVG_DEFAULT_DIMENSIONS,SVG_DEFAULT_DIMENSIONS_HALF}from"./const";import Merge from"./merge";import BaseTool from"./base-tool";import Utils from"./utils";import BadgeTool from"./badge-tool";import CircleTool from"./circle-tool";import CircularSliderTool from"./circular-slider-tool";import EllipseTool from"./ellipse-tool";import EntityAreaTool from"./entity-area-tool";import EntityIconTool from"./entity-icon-tool";import EntityNameTool from"./entity-name-tool";import EntityStateTool from"./entity-state-tool";import HorseshoeTool from"./horseshoe-tool";import LineTool from"./line-tool";import RangeSliderTool from"./range-slider-tool";import RectangleTool from"./rectangle-tool";import RectangleToolEx from"./rectangle-ex-tool";import RegPolyTool from"./regular-polygon-tool";import SegmentedArcTool from"./segmented-arc-tool";import SparklineBarChartTool from"./sparkline-barchart-tool";import SwitchTool from"./switch-tool";import TextTool from"./text-tool";import UserSvgTool from"./user-svg-tool";export default class Toolset{constructor(t,o){this.toolsetId=Math.random().toString(36).substr(2,9),this._card=t,this.dev={...this._card.dev},this.dev.performance&&console.time(`--> ${this.toolsetId} PERFORMANCE Toolset::constructor`),this.config=o,this.tools=[],this.svg={},this.svg.cx=Utils.calculateSvgCoordinate(o.position.cx,SVG_DEFAULT_DIMENSIONS_HALF),this.svg.cy=Utils.calculateSvgCoordinate(o.position.cy,SVG_DEFAULT_DIMENSIONS_HALF),this.svg.x=this.svg.cx-SVG_DEFAULT_DIMENSIONS_HALF,this.svg.y=this.svg.cy-SVG_DEFAULT_DIMENSIONS_HALF,this.transform={},this.transform.scale={},this.transform.scale.x=this.transform.scale.y=1,this.transform.rotate={},this.transform.rotate.x=this.transform.rotate.y=0,this.transform.skew={},this.transform.skew.x=this.transform.skew.y=0,this.config.position.scale&&(this.transform.scale.x=this.transform.scale.y=this.config.position.scale),this.config.position.rotate&&(this.transform.rotate.x=this.transform.rotate.y=this.config.position.rotate),this.transform.scale.x=this.config.position.scale_x||this.config.position.scale||1,this.transform.scale.y=this.config.position.scale_y||this.config.position.scale||1,this.transform.rotate.x=this.config.position.rotate_x||this.config.position.rotate||0,this.transform.rotate.y=this.config.position.rotate_y||this.config.position.rotate||0,this.dev.debug&&console.log("Toolset::constructor config/svg",this.toolsetId,this.config,this.svg);const s={area:EntityAreaTool,circslider:CircularSliderTool,badge:BadgeTool,bar:SparklineBarChartTool,circle:CircleTool,ellipse:EllipseTool,horseshoe:HorseshoeTool,icon:EntityIconTool,line:LineTool,name:EntityNameTool,rectangle:RectangleTool,rectex:RectangleToolEx,regpoly:RegPolyTool,segarc:SegmentedArcTool,state:EntityStateTool,slider:RangeSliderTool,switch:SwitchTool,text:TextTool,usersvg:UserSvgTool};this.config.tools.map(t=>{var o={...t},e={cx:0*SVG_DEFAULT_DIMENSIONS,cy:0*SVG_DEFAULT_DIMENSIONS,scale:this.config.position.scale||1};this.dev.debug&&console.log("Toolset::constructor toolConfig",this.toolsetId,o,e),t.disabled||(o=new s[t.type](this,o,e),this._card.entityHistory.needed|="bar"===t.type,this.tools.push({type:t.type,index:t.id,tool:o}))}),this.dev.performance&&console.timeEnd(`--> ${this.toolsetId} PERFORMANCE Toolset::constructor`)}updateValues(){this.dev.performance&&console.time(`--> ${this.toolsetId} PERFORMANCE Toolset::updateValues`),this.tools&&this.tools.map((o,t)=>{if(o.tool.config.hasOwnProperty("entity_index")&&(this.dev.debug&&console.log("Toolset::updateValues",o,t),o.tool.value=this._card.attributesStr[o.tool.config.entity_index]||this._card.secondaryInfoStr[o.tool.config.entity_index]||this._card.entitiesStr[o.tool.config.entity_index]),o.tool.config.hasOwnProperty("entity_indexes")){var e=[];for(let t=0;t<o.tool.config.entity_indexes.length;++t)e[t]=this._card.attributesStr[o.tool.config.entity_indexes[t].entity_index]||this._card.secondaryInfoStr[o.tool.config.entity_indexes[t].entity_index]||this._card.entitiesStr[o.tool.config.entity_indexes[t].entity_index];o.tool.values=e}}),this.dev.performance&&console.timeEnd(`--> ${this.toolsetId} PERFORMANCE Toolset::updateValues`)}connectedCallback(){this.dev.performance&&console.time(`--> ${this.toolsetId} PERFORMANCE Toolset::connectedCallback`),this.dev.debug&&console.log("*****Event - connectedCallback",this.toolsetId,(new Date).getTime()),this.dev.performance&&console.timeEnd(`--> ${this.toolsetId} PERFORMANCE Toolset::connectedCallback`)}disconnectedCallback(){this.dev.performance&&console.time(`--> ${this.cardId} PERFORMANCE Toolset::disconnectedCallback`),this.dev.debug&&console.log("*****Event - disconnectedCallback",this.toolsetId,(new Date).getTime()),this.dev.performance&&console.timeEnd(`--> ${this.cardId} PERFORMANCE Toolset::disconnectedCallback`)}firstUpdated(e){this.dev.debug&&console.log("*****Event - Toolset::firstUpdated",this.toolsetId,(new Date).getTime()),this.tools&&this.tools.map((t,o)=>{"function"==typeof t.tool.firstUpdated&&t.tool.firstUpdated(e)})}updated(e){this.dev.debug&&console.log("*****Event - Updated",this.toolsetId,(new Date).getTime()),this.tools&&this.tools.map((t,o)=>{"function"==typeof t.tool.updated&&t.tool.updated(e)})}renderToolset(){this.dev.debug&&console.log("*****Event - renderToolset",this.toolsetId,(new Date).getTime());var t=this.tools.map(t=>svg`
          ${t.tool.render()}
      `);return svg`${t}`}render(){return!this._card.isSafari&&!this._card.iOS||this._card.isSafari16?svg`
        <g id="toolset-${this.toolsetId}" class="toolset__group-outer"
           transform="rotate(${this.transform.rotate.x}) scale(${this.transform.scale.x}, ${this.transform.scale.y})"
           style="transform-origin:center; transform-box:fill-box;">
          <svg style="overflow:visible;">
            <g class="toolset__group" transform="translate(${this.svg.cx}, ${this.svg.cy})">
              ${this.renderToolset()}
            </g>
            </svg>
        </g>
      `:svg`
        <g id="toolset-${this.toolsetId}" class="toolset__group-outer"
           transform="rotate(${this.transform.rotate.x}, ${this.svg.cx}, ${this.svg.cy})
                      scale(${this.transform.scale.x}, ${this.transform.scale.y})
                      "
           style="transform-origin:center; transform-box:fill-box;">
          <svg style="overflow:visible;">
            <g class="toolset__group" transform="translate(${this.svg.cx/this.transform.scale.x}, ${this.svg.cy/this.transform.scale.y})">
              ${this.renderToolset()}
            </g>
            </svg>
        </g>
      `}}